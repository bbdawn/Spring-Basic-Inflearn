1-객체지향설계와스프링
2-스프링핵심원리이해1-예제만들기
3-스프링핵심원리이해2-객체지향원리적용
4-스프링컨테이너와스프링빈
5-싱글톤컨테이너
6-컴포넌트스캔
7-의존관계자동주입
8-빈생명주기콜백
9-빈스코프
-----------------------------
**이야기-자바 진영의 추운 겨울과 스프링의 탄생**
	EJB			하이버네이트				JPA
		--등장-->			--자바표준-->

	EJB의 단점 어렵고 복잡하고 느림..

	2002년 로드 존슨 책 출간
	EJB의 문제점 지적
	EJB 없이도 충분히 고품질의 확장 가능한 애플리케이션을 개발할 수 있음을 보여줌
	30,000줄의 코드
	지금의 스프링 핵심 개념과 기반 코드들이 들어가있음
	BeanFactory, ApplicationContext, POJO, 제어의 역전, 의존관계 주입
	책이 유명해지고, 개발자들이 책의 예제 코드를 프로젝트에 사용함. 
	책 출간 직후 유겐휠러, 얀 카로프가 로드존슨에게 오픈소스 프로젝트를 제안
	스프링의 핵심 코드의 상당수는 유겐휠러가 지금도 개발
	스프링의 이름은 전통적인 EJB라는 겨울을 넘어 새로운 시작이라는 뜻으로 지음

**스프링이란?**
	스프링 프레임워크
	스프링 부트
	스프링 데이터
	스프링 세션
	스프링 시큐리티
	스프링 Rest Docs
	스프링 배치
	스프링 클라우드


	스프링 프레임워크
		- 핵심기술 : 스프링 DI 컨테이너, AOP, 이벤트, 기타
		- 웹 기술 : 스프링 MVC, 스프링 WebFlux
		- 데이터 접근 기술 : 트랜잭션, JDBC, ORM 지원, XML 지원
		- 기술 통합 : 캐시, 이메일, 원격접근, 스케줄링
		- 테스트 : 스프링 기반 테스트 지원
		- 언어 : 코틀린, 그루비
		최근에는 스프링 부트를 통해서 스프링 프레임워크의 기술들을 편리하게 사용
	
	
	스프링 부트
		- 스프링을 편리하게 사용할 수 있도록 지원, 최근에는 기본으로 사용
		- 단독으로 실행할 수 있는 스프링 애플리케이션을 쉽게 생성
		- Tomcat 같은 웹 서버를 내장해서 별도의 웹 서버를 설치하지 않아도 됨
		- 손쉬운 빌드 구성을 위한 starter 종속성 제공
		- 스프링과 3rd parth(외부) 라이브러리 자동 구성
		- 메트릭, 상태 확인, 외부 구성 같은 프로덕션 준비 기능
		- 관례에 의한 간결한 설정 
	
	스프링은 왜 만들었나요? 
		스프링은 자바 언어 기반의 프레임워크
		자바 언어의 가장 큰 특징 - 객체 지향 언어
		""스프링은 객체 지향 언어가 가진 강력한 특징을 살려내는 프레임워크""
		스프링은 좋은 객체 지향 애플리케이션을 개발할 수 있게 도와주는 프레임워크
	
**좋은 객체 지향 프로그래밍이란?**
	객체 지향 특징
		- 추상화
		- 캡슐화
		- 상속
		- 다형성
		- 	객체지향프로그래밍은 컴퓨터 프로그램을 명령어의 목록으로 보는 시각에서 벗어나
			여러 개의 독립된 단위, 즉 "객체"들의 모임으로 파악하고자 하는 것이다.
			각각의 객체는 메세지를 주고받고, 데이터를 처리할 수 있다 (협력)
		-	객체 지향 프로그래밍은 프로그램을 유연하고 변경이 용이하게 만들기 때문에 대규모 소프트웨어 개발에 많이 사용된다. ㄴ
		/*
			유연하고 변경이 용이?
			레고 블럭 조립하듯이
			키보드, 마우스 갈아 끼우듯이
			컴포넌트를 쉽고 유연하게 변경하면서 개발할 수 있는 방법
		*/
		
		- 다형성의 실세계 비유
			역할과 구현으로 구분
			ex) 운전자 - 자동차
				운전자는 k3를 타다가 아반떼로 차를 바꿔도 운전을 할 수 있다. 
				(자동차가 바뀌어도 운전자에게 영향을 주지 않음)
				운전자는 자동차 인터페이스 즉 역할에 대해서만 의존하고 있음. 
				클라이언트(운전자)가 자동차의 내부 구조에 대해서 몰라도 됨. 
				k3에서 테슬라로 차가 바뀌어도 운전자가 바뀔 필요가 없음, 운전자는 새롭게 배우지 않아도 됨 
				자동차 세상을 무한 확장이 가능
				"클라이언트에게 영향을 주지 않고 새로운 기능을 제공할 수 있다"
			
			ex) 로미오와 줄리엣 공연
				공연을 할 때 배우는 대체가 가능해야함. 
				로미오 역할을 하는 사람은 줄리엣이 김태희든 송혜교든 누가 할 지는 상관 없음 (다른 대상으로 대체 가능)
				 	
		- 역할과 구현을 분리하면?
			역할과 구현으로 구분하면 세상이 단순해지고, 유연해지며 변경도 편리해진다
			장점	:	클라이언트는 대상의 역할(인터페이스)만 알면 된다
					클라이언트는 구현 대상의 내부 구조를 몰라도 된다. 
					클라이언트는 구현 대상의 내부 구조가 변경되어도 영향을 받지 않는다. 
					클라이언트는 구현 대상 자체를 변경해도 영향을 받지 않는다.		
				
**좋은 객체 지향 설계의 5가지 원칙 (SOLID)**


**객체 지향 설계와 스프링**



